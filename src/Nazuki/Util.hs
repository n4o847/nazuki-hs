{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}

module Nazuki.Util
  ( getQuotations,
    quoteSingleLine,
    quoteMultipleLines,
    createBanner,
    encode,
    decode,
  )
where

import qualified Data.ByteString as ByteString
import Data.Text (Text)
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text.Encoding
import Data.Word (Word8)

-- wrap `text` into a ignorable brainfuck code
getQuotations :: Text -> (Text, Text)
getQuotations text =
  let list =
        scanl
          ( \depth -> \case
              '[' -> depth + 1
              ']' -> depth - 1
              _ -> depth
          )
          (0 :: Int)
          (Text.unpack text)
      depthMin = minimum list
      depthLast = last list
      countLeft = max 0 (negate depthMin) + 1
      countRight = max 0 (depthLast - depthMin) + 1
   in ( Text.replicate countLeft "[",
        Text.replicate countRight "]"
      )

quoteSingleLine :: Text -> Text
quoteSingleLine text =
  let (l, r) = getQuotations text
   in l <> " " <> text <> " " <> r

quoteMultipleLines :: Text -> Text
quoteMultipleLines text =
  let (l, r) = getQuotations text
      text' = case Text.unsnoc text of
        Just (text, '\n') -> text
        _ -> text
   in "[[" <> l <> "\n" <> text' <> "\n" <> r <> "]]"

createBanner :: Text -> Text
createBanner code =
  Text.concat
    [ quoteSingleLine "This code is generated by [Nazuki](https://github.com/n4o847/nazuki-hs).",
      "\n",
      quoteSingleLine "The original code is:",
      "\n",
      quoteMultipleLines code
    ]

encode :: Text -> [Word8]
encode =
  ByteString.unpack . Text.Encoding.encodeUtf8

decode :: [Word8] -> Text
decode =
  Text.Encoding.decodeUtf8 . ByteString.pack
